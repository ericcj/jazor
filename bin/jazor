#!/usr/bin/env ruby

require "fcntl"
require "optparse"

$:.push File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
require "jazor"

options = {
  :quirks_mode  => false,
  :colorize     => false,
  :test         => false,
  :rest_data    => {},
  :rest_headers => {},
  :rest_request => "GET"
}

OptionParser.new do |opts|
  opts.version = Jazor::VERSION
  opts.banner = "Usage: #{$0} [options] [source] [expression ...]\n\n"

  opts.on("-d", "--data NAME=VALUE", "Data sent with REST request") do |opt|
    key, value = opt.split("=")
    options[:rest_data][key.strip] = value.strip
  end

  opts.on("-H", "--header NAME:VALUE", "Header sent with REST request") do |opt|
    key, value = opt.split(":")
    options[:rest_headers][key.strip] = value.strip
  end

  opts.on("-c", "--colorize", "Colorize output") do |opt|
    options[:colorize] = true
  end

  opts.on("-t", "--test", "Enable expression testing") do |opt|
    options[:test] = true
  end

  opts.on("-v", "--verbose", "Enable verbose logging") do |opt|
    Jazor::LOG.level = Logger::DEBUG
  end

  opts.on("-X", "--request REQUEST", "REST request method (default: %s)" % options[:rest_request]) do |opt|
    options[:rest_request] = opt
  end

  if Jazor::HAS_ORDERED_HASH
    opts.on("-s", "--sort", "Sort output") do
      options[:sort] = true
    end
  end

  opts.on("-q", "--quirks-mode", 'Enable "quirks mode" for JSON parser') do
    options[:quirks_mode] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts.help
    exit
  end

  opts.on_tail("--version", "Show version") do
    puts "%s %s\n%s <%s>\n%s" % [opts.program_name, opts.version, Jazor::AUTHOR, Jazor::AUTHOR_EMAIL, Jazor::URL]
    exit
  end

  if ARGV.length == 0 && STDIN.fcntl(Fcntl::F_GETFL, 0) != 0
    puts opts.help
    exit(1)
  end
end.parse!

parse_options = {
  :quirks_mode => options[:quirks_mode]
}

begin

  obj = if STDIN.fcntl(Fcntl::F_GETFL, 0) == 0
    Jazor::LOG.debug("Reading JSON from STDIN")
    Jazor::parse(STDIN.read, parse_options)
  elsif !ARGV[0].nil?
    if ARGV[0] =~ /^#{URI::regexp}$/
      Jazor::LOG.debug("Reading JSON from URI: #{ARGV[0]}")
      Jazor::parse(Jazor::RestClient.send(options[:rest_request], ARGV.shift, options[:rest_headers], options[:rest_data]).body, parse_options)
    elsif File.readable?(ARGV[0])
      Jazor::LOG.debug("Reading JSON from file: #{ARGV[0]}")
      Jazor::parse(IO.read(ARGV.shift), parse_options)
    else
      Jazor::LOG.debug("Reading JSON from ARGV: #{ARGV[0]}")
      Jazor::parse(ARGV.shift, parse_options)
    end
  end

  (ARGV.length > 0 ? ARGV[0..ARGV.length] : [nil]).each do |expression|
    result = Jazor::evaluate(obj, expression)

    if options[:sort] && result.respond_to?(:sort)
      result = if result.respond_to?(:keys) && result.respond_to?(:values)
        Hash[result.sort]
      else
        result.sort{ |a,b| a.to_s <=> b.to_s }
      end
    end

    if options[:test]
      if result
        Jazor::LOG.info("Test passed: #{expression} => #{[Hash, Array].include?(result.class) ? result.to_json : result}")
      else
        Jazor::LOG.error("Test failed: #{expression} => #{[Hash, Array].include?(result.class) ? result.to_json : result}")
        exit(1)
      end
    else
      if [Hash, Array].include?(result.class)
        puts options[:colorize] ? Jazor::colorize(JSON.pretty_generate(result)) : JSON.pretty_generate(result)
      elsif result.is_a?(String)
        puts "\"#{result}\""
      else
        puts result
      end
    end
  end

rescue StandardError => e
  Jazor::LOG.error(e)
  exit(1)
end
